version: 2.1

orbs:
  ggshield: gitguardian/ggshield@volatile
  browser-tools: circleci/browser-tools@1.5.3
  sonarcloud: sonarsource/sonarcloud@2.0.0
  doppler: conpago/doppler@1.3.5

jobs:
  build:
    docker:
      - image: cimg/node:current
    steps:
      - checkout
      - restore_cache:
          name: Restore node_modules and next cache
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            - node-v6-fresh-{{ .Branch }}-{{ checksum "webapp/package-lock.json" }}
            - node-v6-fresh-{{ .Branch }}-
            - node-v6-fresh-
      - restore_cache:
          name: Restore Playwright cache
          keys:
            - playwright-{{ .Branch }}-{{ checksum "webapp/package-lock.json" }}
            - playwright-{{ .Branch }}-
            - playwright-
      - run:
          name: Install modules
          command: |
            cd webapp
            # Clear any existing corrupted installation
            rm -rf node_modules package-lock.json
            # Install dependencies with optimized rollup installation
            npm install
            # Install rollup and native module in one step
            npm install rollup @rollup/rollup-linux-x64-gnu --force
      - run:
          name: Install Playwright Chromium (if not cached)
          command: |
            cd webapp && npx playwright install --with-deps chromium
      - save_cache:
          name: Cache Playwright
          paths:
            - ~/.cache/ms-playwright
          key: playwright-{{ .Branch }}-{{ checksum "webapp/package-lock.json" }}
      - doppler/install
      - run:
          name: Setup Wrangler configuration
          command: |
            cd webapp && ./setup-wrangler-config.sh
      - run:
          name: Clean up previous manifests
          command: |
            cd webapp
            echo "üßπ Cleaning up previous manifest files..."
            rm -f static/manifest-*.json
            echo "‚úÖ Previous manifests cleaned up"
      - run:
          name: Generate development manifest
          command: |
            cd webapp
            echo "üîß Generating development manifest with localhost URLs..."
            npm run manifest:dev
            echo "‚úÖ Development manifest generated successfully"
      - run:
          name: Verify development manifest
          command: |
            cd webapp
            echo "üîç Verifying development manifest..."
            if [ -f "static/manifest-dev.json" ]; then
              echo "‚úÖ Development manifest exists"
              echo "üìã Manifest contents:"
              cat static/manifest-dev.json
            else
              echo "‚ùå Development manifest not found!"
              exit 1
            fi
      - run:
          name: Test manifest generation
          command: |
            cd webapp
            echo "üß™ Testing all manifest generation commands..."
            npm run test:manifests
            echo "‚úÖ All manifest tests passed"
      - run:
          name: Build app
          command: |
            cd webapp && npm run build
      - save_cache:
          name: Update node_modules cache
          paths:
            - webapp/node_modules
          key: node-v6-fresh-{{ .Branch }}-{{ checksum "webapp/package-lock.json" }}
      - persist_to_workspace:
          root: webapp
          paths:
            - .svelte-kit

  code_test:
    docker:
      - image: cimg/node:current
    resource_class: large # Increase to large for more memory and CPU resources
    steps:
      - checkout
      - restore_cache:
          name: Restore node_modules
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            - node-v6-fresh-{{ .Branch }}-{{ checksum "webapp/package-lock.json" }}
            - node-v6-fresh-{{ .Branch }}-
            - node-v6-fresh-
      - attach_workspace:
          at: webapp
      - doppler/install
      - run:
          name: Setup Wrangler configuration
          command: |
            cd webapp && ./setup-wrangler-config.sh
      - run:
          name: Run tests
          command: |
            cd webapp && NODE_OPTIONS="--max-old-space-size=4096" npm run test-ci
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./reports/
      - run:
          name: Check memory usage
          command: |
            echo "Memory usage after tests:"
            free -h
            echo "Disk usage:"
            df -h
          when: always
      - store_test_results:
          path: ./webapp/reports/
      # Temporarily disable SonarCloud scan to debug exit code issue
      # - sonarcloud/scan

  browser_test:
    environment:
      SENTRY_ORG: nick-brett
      SENTRY_PROJECT: bem-backend
      SENTRY_ENVIRONMENT: staging
      SENTRY_RELEASE: << pipeline.git.revision >>
      LIGHTHOUSE_ENABLED: "true"
    docker:
      - image: cimg/node:current-browsers
    steps:
      - run: sudo apt-get update
      - browser-tools/install-chrome:
          replace-existing: true
      - browser-tools/install-chromedriver
      - restore_cache:
          name: Restore Lighthouse CLI cache
          keys:
            - lighthouse-cli-{{ .Branch }}-
            - lighthouse-cli-
      - checkout
      - restore_cache:
          name: Restore node_modules and next cache
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            - node-v6-fresh-{{ .Branch }}-{{ checksum "webapp/package-lock.json" }}
            - node-v6-fresh-{{ .Branch }}-
            - node-v6-fresh-
      - attach_workspace:
          at: webapp
      - doppler/install
      - run:
          name: Setup Wrangler configuration
          command: |
            cd webapp && ./setup-wrangler-config.sh
      - run:
          name: Generate Lighthouse manifest
          command: |
            cd webapp
            echo "üîß Generating Lighthouse test manifest..."
            npm run manifest:lighthouse
            echo "‚úÖ Lighthouse manifest generated successfully"
      - run:
          name: Verify Lighthouse manifest
          command: |
            cd webapp
            echo "üîç Verifying Lighthouse manifest..."
            if [ -f "static/manifest.json" ]; then
              echo "‚úÖ Lighthouse manifest exists"
              echo "üìã Manifest contents:"
              cat static/manifest.json
              echo ""
              echo "üîç Checking for 127.0.0.1:4173 URLs..."
              if grep -q "127.0.0.1:4173" static/manifest.json; then
                echo "‚úÖ Manifest contains correct preview server URLs"
              else
                echo "‚ùå Manifest does not contain preview server URLs!"
                exit 1
              fi
            else
              echo "‚ùå Lighthouse manifest not found!"
              exit 1
            fi
      - run:
          name: Install Lighthouse CLI (if not cached)
          command: |
            sudo npm install -g @lhci/cli@0.9.x
      - save_cache:
          name: Cache Lighthouse CLI
          paths:
            - /usr/local/lib/node_modules/@lhci
          key: lighthouse-cli-{{ .Branch }}-
      - run:
          name: Run Lighthouse checks
          command: |
            cd webapp && npm run lighthouse-staging

  deploy:
    environment:
      SENTRY_ORG: nick-brett
      SENTRY_PROJECT: bem-backend
      SENTRY_ENVIRONMENT: production
      SENTRY_RELEASE: << pipeline.git.revision >>
    docker:
      - image: cimg/node:current
    steps:
      - checkout
      - restore_cache:
          name: Restore node_modules
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            - node-v6-fresh-{{ .Branch }}-{{ checksum "webapp/package-lock.json" }}
            - node-v6-fresh-{{ .Branch }}-
            - node-v6-fresh-
      - attach_workspace:
          at: webapp
      - doppler/install
      - run:
          name: Setup Wrangler configuration
          command: |
            cd webapp && ./setup-wrangler-config.sh
      - run:
          name: Generate production manifest
          command: |
            cd webapp
            echo "üîß Generating production manifest with fintechnick.com URLs..."
            npm run manifest:production
            echo "‚úÖ Production manifest generated successfully"
      - run:
          name: Verify production manifest
          command: |
            cd webapp
            echo "üîç Verifying production manifest..."
            if [ -f "static/manifest.json" ]; then
              echo "‚úÖ Production manifest exists"
              echo "üìã Manifest contents:"
              cat static/manifest.json
            else
              echo "‚ùå Production manifest not found!"
              exit 1
            fi
      - run:
          name: Install jq
          command: |
            sudo apt-get update && sudo apt-get install -y jq
      - run:
          name: Sync Doppler secrets to Cloudflare (production)
          command: |
            cd webapp
            echo "Attempting to sync secrets to Cloudflare production environment..."
            if doppler secrets --json | jq -c 'with_entries(.value = .value.computed)' | npx wrangler secret bulk --env production; then
              echo "‚úÖ Secrets successfully synced to Cloudflare production"
            else
              echo "‚ùå Error: Failed to sync secrets to Cloudflare production. This is critical for production deployments."
              exit 1
            fi
      - run:
          name: Deploying to Cloudflare
          command: |
            cd webapp
            npm run deploy

  deploy-preview:
    environment:
      SENTRY_ORG: nick-brett
      SENTRY_PROJECT: bem-backend
      SENTRY_ENVIRONMENT: preview
      SENTRY_RELEASE: << pipeline.git.revision >>
    docker:
      - image: cimg/node:current
    steps:
      - checkout
      - restore_cache:
          name: Restore node_modules
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            - node-v6-fresh-{{ .Branch }}-{{ checksum "webapp/package-lock.json" }}
            - node-v6-fresh-{{ .Branch }}-
            - node-v6-fresh-
      - attach_workspace:
          at: webapp
      - doppler/install
      - run:
          name: Setup Wrangler configuration
          command: |
            cd webapp && ./setup-wrangler-config.sh
      - run:
          name: Generate preview manifest
          command: |
            cd webapp
            echo "üîß Generating preview manifest with ftn-preview.nick-brett1.workers.dev URLs..."
            npm run manifest:preview
            echo "‚úÖ Preview manifest generated successfully"
      - run:
          name: Verify preview manifest
          command: |
            cd webapp
            echo "üîç Verifying preview manifest..."
            if [ -f "static/manifest.json" ]; then
              echo "‚úÖ Preview manifest exists"
              echo "üìã Manifest contents:"
              cat static/manifest.json
            else
              echo "‚ùå Preview manifest not found!"
              exit 1
            fi
      - run:
          name: Install jq
          command: |
            sudo apt-get update && sudo apt-get install -y jq
      - run:
          name: Sync Doppler secrets to Cloudflare (preview)
          command: |
            cd webapp
            echo "Attempting to sync secrets to Cloudflare preview environment..."
            if doppler secrets --json | jq -c 'with_entries(.value = .value.computed)' | npx wrangler secret bulk --env preview; then
              echo "‚úÖ Secrets successfully synced to Cloudflare preview"
            else
              echo "‚ö†Ô∏è  Warning: Failed to sync secrets to Cloudflare preview. This may be due to script settings conflicts."
              echo "Continuing with deployment as this is not critical for preview environments..."
            fi
      - run:
          name: Deploying preview to Cloudflare
          command: |
            cd webapp
            npm run deploy-preview

workflows:
  build_test_deploy:
    jobs:
      - ggshield/scan:
          name: ggshield-scan
          base_revision: << pipeline.git.base_revision >>
          revision: <<pipeline.git.revision>>
      - build
      - code_test:
          requires:
            - build
          context: SonarCloud
      - browser_test:
          requires:
            - build
      - deploy:
          requires:
            - browser_test
            - code_test
          filters:
            branches:
              only: main
      - deploy-preview:
          requires:
            - browser_test
            - code_test
          filters:
            branches:
              ignore: main
