version: 2.1

orbs:
  ggshield: gitguardian/ggshield@volatile
  browser-tools: circleci/browser-tools@1.5.3
  sonarcloud: sonarsource/sonarcloud@2.0.0
  doppler: conpago/doppler@1.3.5

jobs:
  build:
    docker:
      - image: cimg/node:current
    steps:
      - checkout
      - restore_cache:
          name: Restore node_modules and next cache
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            - node-v6-fresh-{{ .Branch }}-{{ checksum "webapp/package-lock.json" }}
            - node-v6-fresh-{{ .Branch }}-
            - node-v6-fresh-
      - restore_cache:
          name: Restore Playwright cache
          keys:
            - playwright-{{ .Branch }}-{{ checksum "webapp/package-lock.json" }}
            - playwright-{{ .Branch }}-
            - playwright-
      - run:
          name: Install modules
          command: |
            cd webapp
            # Clear any existing corrupted installation
            rm -rf node_modules package-lock.json
            # Install dependencies with optimized rollup installation
            npm install
            # Install rollup and native module in one step
            npm install rollup @rollup/rollup-linux-x64-gnu --force
      - run:
          name: Install Playwright Chromium (if not cached)
          command: |
            cd webapp && npx playwright install --with-deps chromium
      - save_cache:
          name: Cache Playwright
          paths:
            - ~/.cache/ms-playwright
          key: playwright-{{ .Branch }}-{{ checksum "webapp/package-lock.json" }}
      - doppler/install
      - run:
          name: Setup Wrangler configuration
          command: |
            cd webapp && ./setup-wrangler-config.sh
      - run:
          name: Build app
          command: |
            cd webapp && npm run build
      - save_cache:
          name: Update node_modules cache
          paths:
            - webapp/node_modules
          key: node-v6-fresh-{{ .Branch }}-{{ checksum "webapp/package-lock.json" }}
      - persist_to_workspace:
          root: webapp
          paths:
            - .svelte-kit

  code_test:
    docker:
      - image: cimg/node:current
    resource_class: large  # Increase to large for more memory and CPU resources
    steps:
      - checkout
      - restore_cache:
          name: Restore node_modules
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            - node-v6-fresh-{{ .Branch }}-{{ checksum "webapp/package-lock.json" }}
            - node-v6-fresh-{{ .Branch }}-
            - node-v6-fresh-
      - attach_workspace:
          at: webapp
      - doppler/install
      - run:
          name: Setup Wrangler configuration
          command: |
            cd webapp && ./setup-wrangler-config.sh
      - run:
          name: Run tests with optimized settings
          command: |
            cd webapp && NODE_OPTIONS="--max-old-space-size=4096" ./scripts/test-ci-wrapper.sh
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./reports/
            VITEST_MAX_WORKERS: 3
            VITEST_MIN_WORKERS: 2
      - run:
          name: Check memory usage
          command: |
            echo "Memory usage after tests:"
            free -h
            echo "Disk usage:"
            df -h
          when: always
      - store_test_results:
          path: ./webapp/reports/
      - sonarcloud/scan

  browser_test:
    environment:
      SENTRY_ORG: nick-brett
      SENTRY_PROJECT: bem-backend
      SENTRY_ENVIRONMENT: staging
      SENTRY_RELEASE: << pipeline.git.revision >>
    docker:
      - image: cimg/node:current-browsers
    steps:
      - run: sudo apt-get update
      - browser-tools/install-chrome:
          replace-existing: true
      - browser-tools/install-chromedriver
      - restore_cache:
          name: Restore Lighthouse CLI cache
          keys:
            - lighthouse-cli-{{ .Branch }}-
            - lighthouse-cli-
      - checkout
      - restore_cache:
          name: Restore node_modules and next cache
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            - node-v6-fresh-{{ .Branch }}-{{ checksum "webapp/package-lock.json" }}
            - node-v6-fresh-{{ .Branch }}-
            - node-v6-fresh-
      - attach_workspace:
          at: webapp
      - doppler/install
      - run:
          name: Setup Wrangler configuration
          command: |
            cd webapp && ./setup-wrangler-config.sh
      - run:
          name: Install Lighthouse CLI (if not cached)
          command: |
            sudo npm install -g @lhci/cli@0.9.x
      - save_cache:
          name: Cache Lighthouse CLI
          paths:
            - /usr/local/lib/node_modules/@lhci
          key: lighthouse-cli-{{ .Branch }}-
      - run:
          name: Run Lighthouse checks
          command: |
            cd webapp && npm run lighthouse-staging

  deploy:
    environment:
      SENTRY_ORG: nick-brett
      SENTRY_PROJECT: bem-backend
      SENTRY_ENVIRONMENT: production
      SENTRY_RELEASE: << pipeline.git.revision >>
    docker:
      - image: cimg/node:current
    steps:
      - checkout
      - restore_cache:
          name: Restore node_modules
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            - node-v6-fresh-{{ .Branch }}-{{ checksum "webapp/package-lock.json" }}
            - node-v6-fresh-{{ .Branch }}-
            - node-v6-fresh-
      - attach_workspace:
          at: webapp
      - doppler/install
      - run:
          name: Setup Wrangler configuration
          command: |
            cd webapp && ./setup-wrangler-config.sh
      - run:
          name: Deploying to Cloudflare
          command: |
            cd webapp && npm run deploy

workflows:
  build_test_deploy:
    jobs:
      - ggshield/scan:
          name: ggshield-scan
          base_revision: << pipeline.git.base_revision >>
          revision: <<pipeline.git.revision>>
      - build
      - code_test:
          requires:
            - build
          context: SonarCloud
      - browser_test:
          requires:
            - build
      - deploy:
          requires:
            - browser_test
            - code_test
          filters:
            branches:
              only: main
